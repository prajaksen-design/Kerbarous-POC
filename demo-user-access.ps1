<#
.SYNOPSIS
    Simulates different AD user access scenarios for Kerberos NFS PoC
.DESCRIPTION
    Demonstrates permission enforcement based on AD group membership
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("finance", "hr", "readonly")]
    [string]$UserType
)

$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

Write-Host "=== USER ACCESS SIMULATION ===" -ForegroundColor Cyan
Write-Host "Timestamp: $timestamp" -ForegroundColor Gray
Write-Host "Domain: arya.ai" -ForegroundColor Gray

switch ($UserType.ToLower()) {
    "finance" {
        $user = "john.doe@arya.ai"
        $group = "ARYA\Finance-Users"
        
        Write-Host "`n[USER] $user" -ForegroundColor Green
        Write-Host "[GROUP] $group" -ForegroundColor Green
        Write-Host "[TICKET] Kerberos Ticket: Valid" -ForegroundColor Green
        
        Write-Host "`n[TEST] Testing Finance Share Access..." -ForegroundColor Yellow
        try {
            if (!(Test-Path "C:\NFS\Finance")) { New-Item -ItemType Directory -Path "C:\NFS\Finance" -Force | Out-Null }
            
            $content = "Finance Report - Q4 2024`nGenerated by: $user`nTimestamp: $timestamp"
            $content | Out-File "C:\NFS\Finance\quarterly_report.txt" -Force
            
            Write-Host "[SUCCESS] File written to Finance share" -ForegroundColor Green
            Write-Host "          Created: quarterly_report.txt" -ForegroundColor Green
            
            $readContent = Get-Content "C:\NFS\Finance\quarterly_report.txt"
            Write-Host "[SUCCESS] File read from Finance share" -ForegroundColor Green
            Write-Host "          Content preview: $($readContent[0])" -ForegroundColor Green
            
        } catch {
            Write-Host "[ERROR] $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "`n[SECURITY] Testing HR Share Access (should be denied)..." -ForegroundColor Yellow
        try {
            if (!(Test-Path "C:\NFS\HR")) { New-Item -ItemType Directory -Path "C:\NFS\HR" -Force | Out-Null }
            
            # Simulate permission check
            Write-Host "[DENIED] ACCESS DENIED: User not in HR-Users group" -ForegroundColor Red
            Write-Host "         Security policy enforced" -ForegroundColor Red
            
        } catch {
            Write-Host "[SUCCESS] Access properly denied" -ForegroundColor Green
        }
    }
    
    "hr" {
        $user = "jane.smith@arya.ai"
        $group = "ARYA\HR-Users"
        
        Write-Host "`n[USER] $user" -ForegroundColor Green
        Write-Host "[GROUP] $group" -ForegroundColor Green
        Write-Host "[TICKET] Kerberos Ticket: Valid" -ForegroundColor Green
        
        Write-Host "`n[TEST] Testing HR Share Access..." -ForegroundColor Yellow
        try {
            if (!(Test-Path "C:\NFS\HR")) { New-Item -ItemType Directory -Path "C:\NFS\HR" -Force | Out-Null }
            
            $content = "HR Document - Employee Handbook`nUpdated by: $user`nTimestamp: $timestamp"
            $content | Out-File "C:\NFS\HR\employee_handbook.txt" -Force
            
            Write-Host "[SUCCESS] File written to HR share" -ForegroundColor Green
            Write-Host "          Created: employee_handbook.txt" -ForegroundColor Green
            
        } catch {
            Write-Host "[ERROR] $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "`n[SECURITY] Testing Finance Share Access (should be denied)..." -ForegroundColor Yellow
        Write-Host "[DENIED] ACCESS DENIED: User not in Finance-Users group" -ForegroundColor Red
        Write-Host "         Security policy enforced" -ForegroundColor Red
    }
    
    "readonly" {
        $user = "guest@arya.ai"
        $group = "ARYA\ReadOnly-Users"
        
        Write-Host "`n[USER] $user" -ForegroundColor Green
        Write-Host "[GROUP] $group" -ForegroundColor Green
        Write-Host "[TICKET] Kerberos Ticket: Valid" -ForegroundColor Green
        
        Write-Host "`n[TEST] Testing Public Share Read Access..." -ForegroundColor Yellow
        try {
            if (!(Test-Path "C:\NFS\Public")) { New-Item -ItemType Directory -Path "C:\NFS\Public" -Force | Out-Null }
            
            # Create a readme file if it doesn't exist
            if (!(Test-Path "C:\NFS\Public\README.txt")) {
                "Welcome to Public Share`nRead-only access for all users" | Out-File "C:\NFS\Public\README.txt" -Force
            }
            
            $content = Get-Content "C:\NFS\Public\README.txt"
            Write-Host "[SUCCESS] File read from Public share" -ForegroundColor Green
            Write-Host "          Content: $($content[0])" -ForegroundColor Green
            
        } catch {
            Write-Host "[ERROR] $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "`n[SECURITY] Testing Write Access (should be denied)..." -ForegroundColor Yellow
        Write-Host "[DENIED] WRITE DENIED: ReadOnly permission enforced" -ForegroundColor Red
        Write-Host "         User can only read, not write or modify" -ForegroundColor Red
        
        Write-Host "`n[SECURITY] Testing Finance Share Access (should be denied)..." -ForegroundColor Yellow
        Write-Host "[DENIED] ACCESS DENIED: User not in Finance-Users group" -ForegroundColor Red
        Write-Host "         Security policy enforced" -ForegroundColor Red
    }
}

# Log the access attempt
$logEntry = "[$timestamp] USER: $user | ACTION: $UserType-share-access | STATUS: Simulated"
$logPath = "C:\NFS\demo-log.txt"
if (Test-Path (Split-Path $logPath)) {
    $logEntry | Out-File $logPath -Append
}

Write-Host "`n[LOG] Audit logged to: $logPath" -ForegroundColor Cyan
Write-Host ("=" * 60) -ForegroundColor Gray